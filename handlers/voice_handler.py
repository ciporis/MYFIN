import os

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from create_bot import bot
from database.models import Wallet, Category, User, Operation
from database.orm_query import orm_get_wallet_by_title, orm_add_operation, orm_get_all_categories, \
    orm_get_user_with_wallets, orm_get_latest_wallet_operation, orm_delete_operation, orm_get_receivers, \
    orm_edit_wallet_amount
from services.constants import callbacks
from services.whisper_api import convert_voice_to_text
from services.openai import get_json_as_map
from services.profile_displayer import show_profile
from services.constants.operations import Operations
from services.openai import generate_text
from keyboards.inline import get_callback_btns

router = Router()

categories = [
    "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ñ–∏–ª—å–µ",
    "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
    "–ó–¥–æ—Ä–æ–≤—å–µ",
    "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "–°–≤—è–∑—å",
    "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
    "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–ü—Ä–æ—á–µ–µ"
]

@router.message(F.voice | F.audio)
async def check_voice_message(message: types.Message, session: AsyncSession, state: FSMContext):
    user: User = await orm_get_user_with_wallets(session, message.from_user.id)
    current_wallet: Wallet = user.current_wallet

    if not user.is_subscribed:
        return

    wallets = [wallet.title for wallet in user.wallets]

    temp_mes = await message.answer("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    file_id = message.voice.file_id if message.voice else message.audio.file_id
    file = await bot.get_file(file_id)
    download_path = f"temp_voice_{message.from_user.id}.ogg"
    await bot.download_file(file.file_path, download_path)

    voice_text = await convert_voice_to_text(download_path)
    receivers = await orm_get_receivers(session, message.from_user.id)
    receiver_names = [rec.name for rec in receivers]
    print(receiver_names)
    prompt_template = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–µ—Ä–Ω–∏ –¥–∞–Ω–Ω—ã–µ –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. 

–¢—Ä–µ–±—É–µ–º—ã–µ –ø–æ–ª—è:
- operation_type (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π): "–î–æ—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥" –∏–ª–∏ "–ü–µ—Ä–µ–≤–æ–¥"
- wallet_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –∏–ª–∏ undefined (–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—á–µ—Ç–∞: {wallets})
- amount (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π): —á–∏—Å–ª–æ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
- comment (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π): –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
- receiver: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Ç–∏–ø–∞ "–ü–µ—Ä–µ–≤–æ–¥"), –∏–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–Ω–µ–µ –∏—Å—Ö–æ–¥–∏–ª –ø–µ—Ä–µ–≤–æ–¥({receivers})

–ü—Ä–∞–≤–∏–ª–∞:
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤–∞–ª–∏–¥–Ω—ã–π JSON
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ undefined –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ª–∏–±–æ –µ—Å–ª–∏ receiver –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
- –°—É–º–º—É –∏–∑–≤–ª–µ–∫–∞–π –∫–∞–∫ —á–∏—Å–ª–æ
- wallet_name –ø—Ä–∏–≤–æ–¥–∏ –∫ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–¥–µ–∂—É
- –ï—Å–ª–∏ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—è—Å–µ–Ω, –≤–µ—Ä–Ω–∏ undefined –¥–ª—è operation_type
- –î–ª—è –ø–æ–ª—è receiver —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–π —Å –ø—Ä–æ—à–ª—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ—à—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–π –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
–¢–µ–∫—Å—Ç: "–î–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥ 500 —Ä—É–±–ª–µ–π –Ω–∞ –∫–æ—Ñ–µ"
–û—Ç–≤–µ—Ç: {{"operation_type": "–†–∞—Å—Ö–æ–¥", "wallet_name": null, "amount": 500, "comment": "–∫–æ—Ñ–µ", "receiver": ""}}

–¢–µ–∫—Å—Ç: "–ü–µ—Ä–µ–≤–µ–¥–∏ 1000 —Å –∫–∞—Ä—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–Ω—ã–µ"
–û—Ç–≤–µ—Ç: {{"operation_type": "–ü–µ—Ä–µ–≤–æ–¥", "wallet_name": "–∫–∞—Ä—Ç–∞", "amount": 1000, "comment": "–ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", "receiver": "–Ω–∞–ª–∏—á–Ω—ã–µ"}}

–¢–µ–∫—Å—Ç: "–ó–∞—Ä–ø–ª–∞—Ç–∞ 50000 —Ä—É–±–ª–µ–π –Ω–∞ —Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ"
–û—Ç–≤–µ—Ç: {{"operation_type": "–î–æ—Ö–æ–¥", "wallet_name": "—Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ", "amount": 50000, "comment": "–∑–∞—Ä–ø–ª–∞—Ç–∞", "receiver": ""}}

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: "{voice_text}"
"""
    prompt = prompt_template.format(voice_text=voice_text, wallets=wallets, receivers=receiver_names)

    operation_as_json = await get_json_as_map(prompt=prompt)

    print("–†–ê–°–ü–û–ó–ù–ê–Æ...")
    print(operation_as_json)

    undefined_fields_text = ("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞, "
                             "–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é")

    for key in operation_as_json.keys():
        if operation_as_json["wallet_name"] == "undefined":
            operation_as_json["wallet_name"] = current_wallet.title
        elif operation_as_json[key] == "undefined":
            await temp_mes.edit_text(text=undefined_fields_text)
            await show_profile(message.from_user.id, session, state)
            return

    wallet: Wallet = await orm_get_wallet_by_title(session, message.from_user.id, operation_as_json["wallet_name"])

    amount = float(operation_as_json["amount"])

    if amount <= 0 or wallet.amount - amount < 0:
        await temp_mes.edit_text(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤!", reply_markup=get_callback_btns(
            btns={
                "–û–∫" : callbacks.ProfileCommands.show_profile,
            }
        ))

    os.remove(download_path)

    categories_text = ""

    user_categories = await orm_get_all_categories(session, message.from_user.id)

    for category in categories:
        categories_text += f"{category}\n"

    for category in user_categories:
        category: Category
        categories_text += f"{category.title}\n"

    category = ""

    temp_mes2 = None

    if operation_as_json["operation_type"] == Operations.OUTCOME.value:
        temp_mes2 = await temp_mes.edit_text(text="–û–ø—Ä–µ–¥–µ–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞...")

        promt = (
            f"–û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –∫ —Ä–∞—Å—Ö–æ–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω –ø—Ä–µ–Ω–∞–¥–ª–µ–∂–∏—Ç. –í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {operation_as_json['comment']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_text}")

        category = await generate_text(promt)

    await orm_add_operation(
        session=session,
        user_id=message.from_user.id,
        wallet_id=wallet.id,
        amount=amount,
        comment=operation_as_json["comment"],
        operation_type=operation_as_json["operation_type"],
        receiver=operation_as_json["receiver"],
        category=category
    )

    new_amount = wallet.amount - amount

    await orm_edit_wallet_amount(session, wallet.id, new_amount)

    if not voice_text.strip():
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑.")
        return

    text = (f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏:\n"
            f"–°—á—ë—Ç: {operation_as_json['wallet_name']}\n"
            f"–°—É–º–º–∞: {operation_as_json['amount']}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {operation_as_json['comment']}\n"
            f"–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_as_json['operation_type']}\n")

    if operation_as_json['operation_type'] == Operations.OUTCOME.value:
        text += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        message_to_edit = temp_mes2
    elif operation_as_json['operation_type'] == Operations.TRANSFER_TO.value:
        text += f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {operation_as_json['receiver']}"
        message_to_edit = temp_mes
    else:
        message_to_edit = temp_mes

    lates_operation: Operation = await orm_get_latest_wallet_operation(session, wallet.id)

    await message_to_edit.edit_text(
        text=text,
        reply_markup=get_callback_btns(
            btns={
                "–û—Ç–º–µ–Ω–∏—Ç—å": f"cancel_operation_{lates_operation.id}",
                "–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ": callbacks.ProfileCommands.show_profile
            }
        )
    )

@router.callback_query(F.data.startswith("cancel_operation_"))
async def delete_operation(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.answer()
    operation_id = int(callback.data.split("_")[-1])

    await orm_delete_operation(session, operation_id)
    await callback.message.delete()
    await show_profile(callback.from_user.id, session, state)
