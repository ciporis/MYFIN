from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import datetime

from handlers.wallet_maker import start_wallet_creation
from states.st_registration import st_Registration
from keyboards.reply import phone_button, remove
from database.orm_query import orm_add_user
from create_bot import bot

router = Router()

@router.message(st_Registration.fio_state)
async def save_fio(message: Message, state: FSMContext):
    await state.update_data(fio = message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=await phone_button(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"))
    await state.set_state(st_Registration.phone_number_state)

@router.message(st_Registration.phone_number_state, F.contact)
async def save_contact(message: Message, state: FSMContext, session: AsyncSession, apscheduler: AsyncIOScheduler):
    phone_number = message.contact.phone_number.replace('+', '')
    state_data = await state.get_data()
    fio = state_data[st_Registration.fio_key]
    await state.clear()
    await orm_add_user(session, message.from_user.id, fio, phone_number)
    await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=remove)

    date = datetime.datetime.now()
    date_week1 = date + datetime.timedelta(minutes=2)
    date_week2 = date + datetime.timedelta(hours=2)

    user_id = message.from_user.id
    job_id = f'{user_id}_{date}_00:00'

    apscheduler.add_job(send_ad_offer, id=f'{job_id}_g', trigger='date', run_date=date_week1, kwargs={
        'chat_id': user_id})
    apscheduler.add_job(send_ad_offer, id=f'{job_id}_q', trigger='date', run_date=date_week2, kwargs={
        'chat_id': user_id})

    await message.answer("–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º —Å—á—ë—Ç!")
    await start_wallet_creation(message, state)

@router.message(st_Registration.phone_number_state)
async def handle_text_in_contact_state(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä (–∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É)")

async def send_ad_offer(chat_id: int):
    await bot.send_message(chat_id, """–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏?
 –°–µ–π—á–∞—Å –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ë–æ—Ç–∞. –ß—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:
üîπ –≠–∫–æ–Ω–æ–º ‚Äî –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: –±–∞–∑–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø—Ä–∏–±—ã–ª–∏
üîπ –ö–æ–º—Ñ–æ—Ä—Ç ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ—Ç—á—ë—Ç—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
üîπ –ë–∏–∑–Ω–µ—Å ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, –æ—Ç—á—ë—Ç—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º, –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
–ö–∞–∂–¥—ã–π —Ç–∞—Ä–∏—Ñ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ.
Telegram: @ACR3LIS
""")


