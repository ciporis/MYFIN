import datetime
import os

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, LabeledPrice, PreCheckoutQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv, find_dotenv
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.state import State, StatesGroup

import services.profile_displayer
from create_bot import bot
from database.orm_query import orm_get_user_by_id, orm_get_all_categories, orm_get_category, orm_add_category, \
    orm_edit_category_title, orm_delete_category, orm_edit_wallet_is_hidden, orm_edit_user_end_date, \
    orm_edit_user_is_subscribed
from keyboards.inline import get_callback_btns
from services.constants import callbacks
from database.models import User, Category, Wallet
from states.st_category import st_Category
from services.constants.callbacks import ProfileCommands

router = Router()

class st_AddCategory(StatesGroup):
    add_category = State()

questions = ["–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ —è –æ—à–∏–±—Å—è –≤ —Å—É–º–º–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏?",
             "–ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞?",
             "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —á–µ–∫ —á–µ—Ä–µ–∑ QR-–∫–æ–¥?",
             "–ß—Ç–æ –¥–∞—ë—Ç Premium-–ø–æ–¥–ø–∏—Å–∫–∞?"]
answers = ["–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ "
           "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. "
           "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π—Ç–µ "
           "–Ω–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏. "
           "–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è "
           "–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π ‚Äî –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ "
           "–æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.",
           "–ù–µ—Ç. –ü–µ—Ä–µ–≤–æ–¥ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ ‚Äî —ç—Ç–æ –ª–∏—à—å –∑–∞–ø–∏—Å—å –æ –ø–µ—Ä–µ–≤–æ–¥–µ –¥–µ–Ω–µ–≥ "
           "–¥—Ä—É–≥–æ–º—É –ª–∏—Ü—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥—É –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏). –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ "
           "–ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è "
           "–ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —É—á–∏—Ç—ã–≤–∞—Ç—å, –∫–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–ª–∂–Ω—ã –∏–ª–∏ –∫—Ç–æ –¥–æ–ª–∂–µ–Ω "
           "–≤–∞–º.",
           "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–æ–±–∞–≤–∏—Ç—å —á–µ–∫¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ‚Äî –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è"
           " —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞. –î–∞–Ω–Ω—ã–µ —Å —á–µ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
           "–° –Ω–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n"
           "1) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
           "2) –°–∫–∞–Ω–µ—Ä —á–µ–∫–æ–≤\n"
           "3) –£–¥–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
           "4) –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å—á—ë—Ç–∞\n"
           "5) –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"
           ]

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer()

    user: User = await orm_get_user_by_id(session, callback.from_user.id)
    current_wallet: Wallet = user.current_wallet

    print(current_wallet.is_hidden)

    if current_wallet.is_hidden is True:
        buttons = {
            "‚ùì FAQ": callbacks.FAQ,
            "üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/+8OUgQH2HdJkzNTQ6",
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤": callbacks.outcome_categories,
            "üëÅÔ∏è –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—á—ë—Ç": callbacks.change_wallet_state,
            "‚≠ê –ü—Ä–µ–º–∏—É–º": callbacks.premium,
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": callbacks.ProfileCommands.show_profile
        }
    else:
        buttons = {
            "‚ùì FAQ": callbacks.FAQ,
            "üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/+8OUgQH2HdJkzNTQ6",
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤": callbacks.outcome_categories,
            "üôà –°–∫—Ä—ã—Ç—å —Å—á—ë—Ç": callbacks.change_wallet_state,
            "‚≠ê –ü—Ä–µ–º–∏—É–º": callbacks.premium,
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": callbacks.ProfileCommands.show_profile
        }

    sizes = (2, 2, 1, 1, )

    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=get_callback_btns(
        btns=buttons,
        sizes=sizes
    ))

# FAQ
@router.callback_query(F.data == callbacks.FAQ)
async def show_faq(callback: CallbackQuery, state: FSMContext):
    buttons = {}

    for question in questions:
        buttons[question] = f"show_answer_{questions.index(question)}"

    buttons["–ù–∞–∑–∞–¥"] = callbacks.settings

    await callback.message.edit_text(text="FAQ", reply_markup=get_callback_btns(
        btns=buttons,
    ))

@router.callback_query(F.data.startswith("show_answer_"))
async def show_answer(callback: CallbackQuery):
    answer = answers[int(callback.data.split('_')[-1])]

    await callback.message.edit_text(text=answer, reply_markup=get_callback_btns(
        btns={
            "–ù–∞–∑–∞–¥" : callbacks.FAQ,
        },
    ))

# Categories
@router.callback_query(F.data == callbacks.outcome_categories)
async def show_categories(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    user: User = await orm_get_user_by_id(session, callback.from_user.id)

    all_categories = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    default_categories = [
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "–ñ–∏–ª—å–µ",
        "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–ó–¥–æ—Ä–æ–≤—å–µ",
        "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "–°–≤—è–∑—å",
        "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        "–ü—Ä–æ—á–µ–µ"
    ]
    user_categories = await orm_get_all_categories(session, callback.from_user.id)

    for category in default_categories:
        all_categories += f"{category}\n"

    buttons = {}

    if user.is_subscribed:
        for category in user_categories:
            category: Category
            buttons[category.title] = f"edit_category_{category.id}\n"

        buttons["–î–æ–±–∞–≤–∏—Ç—å"] = f"add_category"

    buttons["–ù–∞–∑–∞–¥"] = callbacks.settings

    await callback.message.edit_text(text=all_categories, reply_markup=get_callback_btns(
        btns=buttons,
    ))

@router.callback_query(F.data == "add_category")
async def add_category(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    await state.set_state(st_AddCategory.add_category)

@router.message(st_AddCategory.add_category)
async def save_category_title(message: Message, session: AsyncSession, state: FSMContext):
    await orm_add_category(session, message.from_user.id, message.text)
    user: User = await orm_get_user_by_id(session, message.from_user.id)

    all_categories = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    default_categories = [
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "–ñ–∏–ª—å–µ",
        "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–ó–¥–æ—Ä–æ–≤—å–µ",
        "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "–°–≤—è–∑—å",
        "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        "–ü—Ä–æ—á–µ–µ"
    ]
    user_categories = await orm_get_all_categories(session, message.from_user.id)

    for category in default_categories:
        all_categories += f"{category}\n"

    buttons = {}

    if user.is_subscribed:
        for category in user_categories:
            category: Category
            buttons[category.title] = f"edit_category_{category.id}\n"

        buttons["–î–æ–±–∞–≤–∏—Ç—å"] = f"add_category"

    buttons["–ù–∞–∑–∞–¥"] = callbacks.settings

    await message.answer(text=all_categories, reply_markup=get_callback_btns(
        btns=buttons,
    ))

@router.callback_query(F.data.startswith("edit_category_"))
async def edit_category(callback: CallbackQuery, session: AsyncSession):
    category_id: int = int(callback.data.split('_')[-1])

    category: Category = await orm_get_category(session, category_id)

    buttons = {
        "–ò–∑–º–µ–Ω–∏—Ç—å" : f"change_category_title_{category_id}",
        "–£–¥–∞–ª–∏—Ç—å" : f"delete_category_{category_id}",
        "–ù–∞–∑–∞–¥" : callbacks.outcome_categories,
    }

    await callback.message.edit_text(text=f"{category.title}", reply_markup=get_callback_btns(
        btns=buttons,
        sizes=(2, 1, ),
    ))

@router.callback_query(F.data.startswith("change_category_title_"))
async def edit_category_title(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    category_id: int = int(callback.data.split('_')[-1])
    await state.update_data(category_id=category_id)

    await callback.message.edit_text(text="–ù–æ–≤–æ–µ –Ω–∞–≤–∑–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(st_Category.edit_title_state)

@router.message(st_Category.edit_title_state)
async def save_edited_category_title(message: Message, session: AsyncSession, state: FSMContext):
    state_data = await state.get_data()

    category_id: int = int(state_data["category_id"])

    await orm_edit_category_title(session, category_id, message.text)

    user: User = await orm_get_user_by_id(session, message.from_user.id)

    all_categories = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    default_categories = [
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "–ñ–∏–ª—å–µ",
        "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–ó–¥–æ—Ä–æ–≤—å–µ",
        "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "–°–≤—è–∑—å",
        "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        "–ü—Ä–æ—á–µ–µ"
    ]
    user_categories = await orm_get_all_categories(session, message.from_user.id)

    for category in default_categories:
        all_categories += f"{category}\n"

    buttons = {}

    if user.is_subscribed:
        for category in user_categories:
            category: Category
            buttons[category.title] = f"edit_category_{category.id}\n"

        buttons["–î–æ–±–∞–≤–∏—Ç—å"] = f"add_category"

    buttons["–ù–∞–∑–∞–¥"] = callbacks.settings

    await message.answer(text=all_categories, reply_markup=get_callback_btns(
        btns=buttons,
    ))

    await state.clear()

@router.callback_query(F.data.startswith("delete_category_"))
async def delete_category(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    category_id: int = int(callback.data.split('_')[-1])

    await orm_delete_category(session, category_id)
    await callback.message.delete()

    user: User = await orm_get_user_by_id(session, callback.from_user.id)

    all_categories = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"

    default_categories = [
        "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è",
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "–ñ–∏–ª—å–µ",
        "–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
        "–ó–¥–æ—Ä–æ–≤—å–µ",
        "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
        "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "–°–≤—è–∑—å",
        "–õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
        "–ü—Ä–æ—á–µ–µ"
    ]
    user_categories = await orm_get_all_categories(session, callback.from_user.id)

    for category in default_categories:
        all_categories += f"{category}\n"

    buttons = {}

    if user.is_subscribed:
        for category in user_categories:
            category: Category
            buttons[category.title] = f"edit_category_{category.id}\n"

        buttons["–î–æ–±–∞–≤–∏—Ç—å"] = f"add_category"

    buttons["–ù–∞–∑–∞–¥"] = callbacks.settings

    await bot.send_message(chat_id=user.id, text=all_categories, reply_markup=get_callback_btns(
        btns=buttons,
    ))

    await state.clear()

# Hide wallet
@router.callback_query(F.data == callbacks.change_wallet_state)
async def hide_wallet(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user: User = await orm_get_user_by_id(session, callback.from_user.id)
    current_wallet: Wallet = user.current_wallet

    wallet_is_hidden = not current_wallet.is_hidden

    print(current_wallet.title)
    print(f"Current wallet is hidden {wallet_is_hidden}")

    await orm_edit_wallet_is_hidden(session, current_wallet.id, wallet_is_hidden)

    user: User = await orm_get_user_by_id(session, callback.from_user.id)
    current_wallet: Wallet = user.current_wallet

    if current_wallet.is_hidden is True:
        buttons = {
            "‚ùì FAQ": callbacks.FAQ,
            "üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/+8OUgQH2HdJkzNTQ6",
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤": callbacks.outcome_categories,
            "üëÅÔ∏è –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—á—ë—Ç": callbacks.change_wallet_state,
            "‚≠ê –ü—Ä–µ–º–∏—É–º": callbacks.premium,
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": callbacks.ProfileCommands.show_profile
        }
    else:
        buttons = {
            "‚ùì FAQ": callbacks.FAQ,
            "üõ†Ô∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞": "https://t.me/+8OUgQH2HdJkzNTQ6",
            "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤": callbacks.outcome_categories,
            "üôà –°–∫—Ä—ã—Ç—å —Å—á—ë—Ç": callbacks.change_wallet_state,
            "‚≠ê –ü—Ä–µ–º–∏—É–º": callbacks.premium,
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥": callbacks.ProfileCommands.show_profile
        }

    sizes = (2, 2, 1, 1,)

    await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=get_callback_btns(
        btns=buttons,
        sizes=sizes
    ))

# Premium
@router.callback_query(F.data == callbacks.premium)
async def show_premium(callback: CallbackQuery, state: FSMContext):
    text = ("üéâ –° –Ω–∞—à–µ–π *–ü—Ä–µ–º–∏—É–º* –ø–æ–¥–ø–∏—Å–∫–æ–π –≤–∞–º —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n\n"
            "‚ú® *–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "üé§ 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "üßæ 2) –°–∫–∞–Ω–µ—Ä —á–µ–∫–æ–≤\n"
            "üìä 3) –£–¥–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "üí≥ 4) –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–º–µ—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å—á—ë—Ç–∞\n"
            "üìÇ 5) –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n"
            "üöÄ *–ü–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏!*")

    await callback.message.edit_text(text=text, reply_markup=get_callback_btns(
        btns={
            "–ö—É–ø–∏—Ç—å" : "buy_subscription",
            "–ù–∞–∑–∞–¥" : callbacks.settings,
        }
    ))

@router.callback_query(F.data == "buy_subscription")
async def send_money(call: CallbackQuery):
    load_dotenv(find_dotenv())

    payment_token = os.getenv("UKASSA_TOKEN")

    description = (
        f"–û–ø–ª–∞—Ç–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {400} —Ä—É–±–µ–ª–π"
    )
    await call.bot.send_invoice(
        chat_id=call.from_user.id,
        title=f'–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞ [{400}‚ÇΩ]',
        description=description,
        payload=f'donate_{400}',
        currency='RUB',
        prices=[LabeledPrice(label="–ó–∞–∫–∞–∑", amount=400*100)],
        provider_token=payment_token
    )

    await call.answer()

@router.pre_checkout_query()
async def user_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.successful_payment)
async def user_successful_payment(message: Message, session: AsyncSession, apscheduler: AsyncIOScheduler):
    end_date: datetime.date = datetime.date.today() + datetime.timedelta(days=30)

    apscheduler.add_job(
        func=send_notification,
        trigger="date",
        run_date=end_date - datetime.timedelta(days=1),
        kwargs={ "chat_id" : message.chat.id},
    )

    apscheduler.add_job(
        func=delete_sub_end_date,
        trigger="date",
        run_date=end_date,
        kwargs={"user_id": message.from_user.id, "chat_id": message.chat.id, "session" : session},
    )

    await orm_edit_user_end_date(session, message.from_user.id, sub_end_date=end_date)
    await orm_edit_user_is_subscribed(session, message.from_user.id, True)
    await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {400}‚ÇΩ –æ—Ñ–æ—Ä–º–ª–µ–Ω")

async def send_notification(chat_id: int):
    await bot.send_message(
        chat_id=chat_id,
        text=f"!!!–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {1} –¥–Ω–µ–π!!!"
    )

async def delete_sub_end_date(user_id: int, chat_id: int, session: AsyncSession):
    await orm_edit_user_end_date(session, user_id, None)
    await orm_edit_user_is_subscribed(session, user_id, False)
    await bot.send_message(chat_id=chat_id, text="!!!–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫!!!")